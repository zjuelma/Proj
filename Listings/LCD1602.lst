C51 COMPILER V9.60.7.0   LCD1602                                                           09/04/2024 13:53:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\LCD1602.obj
COMPILER INVOKED BY: E:\studytools\keil5\C51\BIN\C51.EXE LCD1602.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\L
                    -istings\LCD1602.lst) TABS(2) OBJECT(.\Objects\LCD1602.obj)

line level    source

   1          /*
   2           hushmoon
   3           2024.8.31
   4           NATSU NO OWARI
   5          */
   6          #include "LCD1602.h"
   7          
   8          /*
   9              @author hushmoon
  10              Name: LCD_Write_Command
  11              Function: Write command to LCD1602
  12              Parameter:
  13                  _cmd -- the command
  14                  _check -- whether to wait for availability or not
  15              Additional Descriptions:
  16                  RS = 0->LCD implement instructions
  17                  RS = 1->LCD display data
  18                  RW = 0->write data TO LCD
  19                  RW = 1->read data FROM LCD
  20                  EN: enable.only when there is a level jump from 0 to 1, can LCD update the data displayed
  21          */
  22          void LCD_Write_Command(uchar _cmd, uchar _check)
  23          {
  24   1      
  25   1          // waiting for availability
  26   1          if (_check) WaitForEnable();
  27   1      
  28   1          CLR_RS;
  29   1          CLR_RW;
  30   1          CLR_EN;
  31   1          LCD_Delay1ms();
  32   1      
  33   1          // prepare command in advance
  34   1          DataPort = _cmd;
  35   1          LCD_Delay1ms();
  36   1      
  37   1          // send level pulse
  38   1          SET_EN; // EN = 1
  39   1          LCD_Delay1ms();
  40   1          CLR_EN; // EN = 0
  41   1          LCD_Delay1ms();
  42   1      }
  43          
  44          /*
  45              @author hushmoon
  46              Name: LCD_Write_Data
  47              Function: Write data to LCD1602
  48              Parameter: _dat -- the data
  49          */
  50          void LCD_Write_Data(uchar _dat)
  51          {
  52   1          // waiting for availability
  53   1          WaitForEnable();
  54   1      
C51 COMPILER V9.60.7.0   LCD1602                                                           09/04/2024 13:53:12 PAGE 2   

  55   1          SET_RS;
  56   1          CLR_RW;
  57   1          CLR_EN;
  58   1          LCD_Delay1ms();
  59   1      
  60   1          // prepare data in advance
  61   1          DataPort = _dat;
  62   1          LCD_Delay1ms();
  63   1      
  64   1          // send level pulse
  65   1          SET_EN; // EN = 1
  66   1          LCD_Delay1ms();
  67   1          CLR_EN; // EN = 0
  68   1          LCD_Delay1ms();
  69   1      }
  70          
  71          /*
  72              @author hushmoon
  73              Name: LCD_Init
  74              Function: Initializing LCD1602
  75              Parameter: void
  76          */
  77          void LCD_Init(void)
  78          {
  79   1          // write display-mode setting command
  80   1          // delay for 15ms
  81   1          LCD_Write_Command(0x38, 0);
  82   1          DelayMs(5);
  83   1          LCD_Write_Command(0x38, 0);
  84   1          DelayMs(5);
  85   1          LCD_Write_Command(0x38, 0);
  86   1          DelayMs(5);
  87   1      
  88   1          // check if enable is necessary
  89   1          LCD_Write_Command(0x38, 1); // display mode setting
  90   1          LCD_Write_Command(0x08, 1); // close display
  91   1          LCD_Write_Command(0x01, 1); // clear screen
  92   1          LCD_Write_Command(0x06, 1); // cursor-moving setting
  93   1          LCD_Write_Command(0x0C, 1); // open display
  94   1      }
  95          
  96          /*
  97              @author hushmoon
  98              Name: LCD_Clear
  99              Function: clear the screen
 100              Parameter: void
 101          */
 102          void LCD_Clear(void)
 103          {
 104   1          LCD_Write_Command(0x01, 1); // clear screen
 105   1          DelayMs(5);
 106   1      }
 107          
 108          /*
 109              @author hushmoon
 110              Name: WaitForEnable
 111              Function: wait for lcd1602 being available
 112              Parameter: void
 113          */
 114          void WaitForEnable(void)
 115          {
 116   1          uint later = 0;
C51 COMPILER V9.60.7.0   LCD1602                                                           09/04/2024 13:53:12 PAGE 3   

 117   1          DataPort   = 0xFF; // set the port to input
 118   1          CLR_RS;
 119   1          SET_RW;
 120   1          Delay1Us();
 121   1          SET_EN;
 122   1          Delay1Us();
 123   1          Delay1Us();
 124   1      
 125   1          // waiting for the enable to be 0
 126   1          while (((DataPort & 0x80) != 0) && (later < 1000)) {
 127   2              Delay1Us();
 128   2              later++;
 129   2          }
 130   1      
 131   1          CLR_EN;
 132   1      }
 133          
 134          /*
 135              @author hushmoon
 136              Name: LCD_LocateXY
 137              Function: locating the display address
 138              Parameter:
 139                  _X: display column
 140                  _Y: display row
 141          */
 142          void LCD_LocateXY(uchar _X, uchar _Y)
 143          {
 144   1          uchar temp;
 145   1      
 146   1          temp = _X & 0x0F; // preserve the last 4bits of x
 147   1          _Y &= 0x01;       // only preserve the last bit of y
 148   1      
 149   1          if (_Y) temp |= 0x40; // if it is on the second row
 150   1          temp |= 0x80;         // When writing the display address, the highest bit D7 is required to be consta
             -nt at high level 1
 151   1      
 152   1          LCD_Write_Command(temp, 1);
 153   1      }
 154          
 155          /*
 156              @author hushmoon
 157              Name: LCD_Display_Char
 158              Function: LCD display a single char
 159              Parameter:
 160                  x: the culumn
 161                  y: the row
 162                  _char: the char
 163          */
 164          void LCD_Display_Char(uchar x, uchar y, uchar _char)
 165          {
 166   1          LCD_LocateXY(x, y);    // locate the display address
 167   1          LCD_Write_Data(_char); // display the char
 168   1      }
 169          
 170          /*
 171              @author hushmoon
 172              Name: LCD_Display_String
 173              Function: LCD display a string
 174              Parameter:
 175                  x: the culumn
 176                  y: the row
 177                  *string: the string
C51 COMPILER V9.60.7.0   LCD1602                                                           09/04/2024 13:53:12 PAGE 4   

 178          */
 179          void LCD_Display_String(uchar x, uchar y, uchar *string)
 180          {
 181   1          uchar i;
 182   1          LCD_LocateXY(x, y); // locate the display address
 183   1          // display the string
 184   1          // tips:the string is terminated by '\0'
 185   1          for (i = 0; string[i] != '\0'; i++) {
 186   2              LCD_Write_Data(string[i]);
 187   2          }
 188   1      }
 189          
 190          /*
 191              @author hushmoon
 192              Name: LCD_Display_Number
 193              Function: LCD display a number
 194              Parameter:
 195                  x: the culumn
 196                  y: the row
 197                  _dat: the number
 198                  _len: the number's length
 199          */
 200          void LCD_Display_Number(uchar x, uchar y, uint _dat, uchar _len)
 201          {
 202   1          uchar i;
 203   1          uint divisor = 1;
 204   1      
 205   1          LCD_LocateXY(x, y);
 206   1      
 207   1          for (i = 1; i < _len; i++) {
 208   2              divisor *= 10;
 209   2          }
 210   1      
 211   1          for (i = 0; i < _len; i++) {
 212   2              uchar digit = (_dat / divisor) % 10;
 213   2              /*  display the number
 214   2                  tips: the number is displayed in ASCII code
 215   2                  we need to plus 0's ASCII code
 216   2               */
 217   2              LCD_Write_Data(digit + '0');
 218   2              divisor /= 10;
 219   2          }
 220   1      }
 221          
 222          /*
 223              @author hushmoon
 224              Name: LCD_Display_LCD_Display_SignedNumber
 225              Function: LCD display a signed number
 226              Parameter:
 227                  x: the culumn
 228                  y: the row
 229                  _dat: the number
 230                  _len: the number's length
 231          */
 232          void LCD_Display_SignedNumber(uchar x, uchar y, int _dat, uchar _len)
 233          {
 234   1          uchar i;
 235   1          uint divisor = 1;
 236   1          uint number;
 237   1      
 238   1          LCD_LocateXY(x, y);
 239   1      
C51 COMPILER V9.60.7.0   LCD1602                                                           09/04/2024 13:53:12 PAGE 5   

 240   1          if (_dat < 0) { // if it is a negative number
 241   2              LCD_Write_Data('-');
 242   2              number = -_dat;
 243   2          } else {
 244   2              number = _dat;
 245   2          }
 246   1          // the same as the LCD_Display_Number below
 247   1          for (i = 1; i < _len; i++) {
 248   2              divisor *= 10;
 249   2          }
 250   1      
 251   1          for (i = 0; i < _len; i++) {
 252   2              uchar digit = (number / divisor) % 10;
 253   2              LCD_Write_Data(digit + '0');
 254   2              divisor /= 10;
 255   2          }
 256   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    488    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
