C51 COMPILER V9.60.7.0   MLX90614                                                          09/02/2024 11:33:52 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MLX90614
OBJECT MODULE PLACED IN .\Objects\MLX90614.obj
COMPILER INVOKED BY: E:\studytools\keil5\C51\BIN\C51.EXE MLX90614.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MLX90614.lst) TABS(2) OBJECT(.\Objects\MLX90614.obj)

line level    source

   1          /*
   2           hushmoon
   3           2024.9.1
   4           AKIE NO HAJIME
   5          */
   6          #include "MLX90614.h"
   7          
   8          bdata uchar flag;
   9          sbit bit_out = flag ^ 7;
  10          sbit bit_in  = flag ^ 0;
  11          
  12          uchar Data_High, Data_Low, PEC;
  13          
  14          /*
  15              @author hushmoon
  16              @brief delay for 1us approximately
  17              @param us: how many us you wanna delay
  18          */
  19          void I2C_Delay_Us(uint us)
  20          {
  21   1          while (us--) {
  22   2              Delay1Us();
  23   2          }
  24   1      }
  25          
  26          // I2C MODULE
  27          
  28          /*
  29              @author hushmoon
  30              @name I2C_Start
  31              @brief start bit
  32              @param void
  33          */
  34          void I2C_Start(void)
  35          {
  36   1          SDA = 1;
  37   1          I2C_Delay_Us(5);
  38   1          SCL = 1;
  39   1          I2C_Delay_Us(5);
  40   1          SDA = 0;
  41   1          I2C_Delay_Us(5);
  42   1          SCL = 0;
  43   1          I2C_Delay_Us(5);
  44   1      }
  45          
  46          /*
  47              @author hushmoon
  48              @name I2C_Stop
  49              @brief end bit
  50              @param void
  51          */
  52          void I2C_Stop(void)
  53          {
  54   1          SCL = 0;
C51 COMPILER V9.60.7.0   MLX90614                                                          09/02/2024 11:33:52 PAGE 2   

  55   1          I2C_Delay_Us(5);
  56   1          SDA = 0;
  57   1          I2C_Delay_Us(5);
  58   1          SCL = 1;
  59   1          I2C_Delay_Us(5);
  60   1          SDA = 1;
  61   1          I2C_Delay_Us(5);
  62   1      }
  63          
  64          void send_bit(void)
  65          {
  66   1          if (bit_out == 0)
  67   1              SDA = 0;
  68   1          else
  69   1              SDA = 1;
  70   1          Delay1Us();
  71   1          SCL = 1;
  72   1          I2C_Delay_Us(10);
  73   1          SCL = 0;
  74   1          I2C_Delay_Us(10);
  75   1      }
  76          
  77          void send_byte(uchar _byte)
  78          {
  79   1          char i, dat;
  80   1          int retry_counter;
  81   1          dat           = _byte;
  82   1          retry_counter = 10;
  83   1      
  84   1          while (retry_counter > 0) {
  85   2              for (i = 0; i < 8; i++) {
  86   3                  bit_out = (dat & 0x80) ? 1 : 0;
  87   3                  send_bit();
  88   3                  dat <<= 1;
  89   3              }
  90   2              receive_bit();
  91   2              if (bit_in == 0) {
  92   3                  return;
  93   3              }
  94   2              I2C_Stop();
  95   2              I2C_Start();
  96   2              retry_counter--; // Decrement retry counter
  97   2              dat = _byte;     // Reset data for retransmission
  98   2          }
  99   1      }
 100          
 101          void receive_bit(void)
 102          {
 103   1          SDA    = 1;
 104   1          bit_in = 1;
 105   1          SCL    = 1;
 106   1          I2C_Delay_Us(10);
 107   1          bit_in = SDA;
 108   1          I2C_Delay_Us(2);
 109   1          SCL = 0;
 110   1          I2C_Delay_Us(10);
 111   1      }
 112          
 113          uchar receive_byte(void)
 114          {
 115   1          uchar i, dat;
 116   1          dat = 0;
C51 COMPILER V9.60.7.0   MLX90614                                                          09/02/2024 11:33:52 PAGE 3   

 117   1          for (i = 0; i < 8; i++) {
 118   2              dat = dat << 1;
 119   2              receive_bit();
 120   2              if (bit_in == 1)
 121   2                  dat = dat + 1;
 122   2          }
 123   1          send_bit(); // acknowledgement
 124   1          return dat;
 125   1      }
 126          
 127          uint Read_T(void)
 128          {
 129   1          I2C_Start();
 130   1          send_byte(0x00);
 131   1          send_byte(0x07);
 132   1      
 133   1          I2C_Start();
 134   1          send_byte(0x01);
 135   1          bit_out   = 0;
 136   1          Data_Low  = receive_byte();
 137   1          bit_out   = 0;
 138   1          Data_High = receive_byte();
 139   1          bit_out   = 1;
 140   1          PEC       = receive_byte();
 141   1          I2C_Stop();
 142   1          return (Data_High * 256 + Data_Low);
 143   1      }
 144          
 145          void Display_Temperature(void)
 146          {
 147   1          int temp, T, a, b;
 148   1          temp = Read_T();
 149   1          T    = temp * 2;
 150   1      
 151   1          if (T >= 27315) {
 152   2              T = T - 27315;
 153   2              a = T / 100;
 154   2              b = T % 100;
 155   2          } else {
 156   2              T = 27315 - T;
 157   2              a = T / 100;
 158   2              b = T - a * 100;
 159   2              LCD_Display_Char(1, 1, '-');
 160   2          }
 161   1          LCD_Display_Number(1, 2, a, 3);
 162   1          LCD_Display_Char(1, 5, '.');
 163   1          LCD_Display_Number(1, 6, (unsigned long)b % 100, 2);
 164   1          LCD_Display_Char(1, 8, 0xDF);
 165   1          LCD_Display_Char(1, 9, 'C');
 166   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
