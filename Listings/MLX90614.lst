C51 COMPILER V9.60.7.0   MLX90614                                                          09/04/2024 00:22:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MLX90614
OBJECT MODULE PLACED IN .\Objects\MLX90614.obj
COMPILER INVOKED BY: E:\studytools\keil5\C51\BIN\C51.EXE MLX90614.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\MLX90614.lst) TABS(2) OBJECT(.\Objects\MLX90614.obj)

line level    source

   1          /*
   2           hushmoon
   3           2024.9.1
   4           AKIE NO HAJIME
   5          */
   6          #include "MLX90614.h"
   7          
   8          bdata uchar flag;
   9          sbit bit_out = flag ^ 7;
  10          sbit bit_in  = flag ^ 0;
  11          
  12          uchar Data_High, Data_Low, PEC;
  13          
  14          /*
  15              @author hushmoon
  16              Name: I2C_Delay_Us
  17              Function: delay for 1us approximately
  18              Parameter: us -- the total us you wanna delay
  19          */
  20          void I2C_Delay_Us(uint us)
  21          {
  22   1          while (us--) {
  23   2              Delay1Us();
  24   2          }
  25   1      }
  26          
  27          // I2C MODULE
  28          
  29          /*
  30              @author hushmoon
  31              Name: I2C_Start
  32              Function: start bit
  33              Parameter: void
  34          */
  35          void I2C_Start(void)
  36          {
  37   1          SDA = 1;
  38   1          DelayUs2x(4);
  39   1          SCL = 1;
  40   1          DelayUs2x(4);
  41   1          SDA = 0;
  42   1          DelayUs2x(4);
  43   1          SCL = 0;
  44   1          DelayUs2x(4);
  45   1      }
  46          
  47          /*
  48              @author hushmoon
  49              Name: I2C_Stop
  50              Function: end bit
  51              Parameter: void
  52          */
  53          void I2C_Stop(void)
  54          {
C51 COMPILER V9.60.7.0   MLX90614                                                          09/04/2024 00:22:03 PAGE 2   

  55   1          SCL = 0;
  56   1          DelayUs2x(4);
  57   1          SDA = 0;
  58   1          DelayUs2x(4);
  59   1          SCL = 1;
  60   1          DelayUs2x(4);
  61   1          SDA = 1;
  62   1          DelayUs2x(4);
  63   1      }
  64          
  65          /*
  66              @author hushmoon
  67              Name: send_bit
  68              Function: send one bit
  69              Parameter: void
  70          */
  71          void send_bit(void)
  72          {
  73   1          if (bit_out == 0)
  74   1              SDA = 0;
  75   1          else
  76   1              SDA = 1;
  77   1          DelayUs2x(1);
  78   1          SCL = 1;
  79   1          DelayUs2x(4);
  80   1          SCL = 0;
  81   1          DelayUs2x(4);
  82   1      }
  83          
  84          /*
  85              @author hushmoon
  86              Name: send_byte
  87              Function: send one byte
  88              Parameter: _byte -- the byte you wanna send
  89          */
  90          void send_byte(uchar _byte)
  91          {
  92   1          char i, dat;
  93   1          int retry_counter;
  94   1          dat           = _byte;
  95   1          retry_counter = 10;
  96   1      
  97   1          while (retry_counter > 0) {
  98   2              for (i = 0; i < 8; i++) {
  99   3                  bit_out = (dat & 0x80) ? 1 : 0;
 100   3                  send_bit();
 101   3                  dat <<= 1;
 102   3              }
 103   2              receive_bit();
 104   2              if (bit_in == 0) {
 105   3                  return;
 106   3              }
 107   2              I2C_Stop();
 108   2              I2C_Start();
 109   2              retry_counter--; // Decrement retry counter
 110   2              dat = _byte;     // Reset data for retransmission
 111   2          }
 112   1      }
 113          
 114          /*
 115              @author hushmoon
 116              Name: receive_bit
C51 COMPILER V9.60.7.0   MLX90614                                                          09/04/2024 00:22:03 PAGE 3   

 117              Function: receive one bit
 118              Parameter: void
 119          */
 120          void receive_bit(void)
 121          {
 122   1          SDA    = 1;
 123   1          bit_in = 1;
 124   1          SCL    = 1;
 125   1          DelayUs2x(4);
 126   1          bit_in = SDA;
 127   1          DelayUs2x(2);
 128   1          SCL = 0;
 129   1          DelayUs2x(4);
 130   1      }
 131          
 132          /*
 133              @author hushmoon
 134              @return dat -- the byte you received
 135              Name: receive_byte
 136              Function: receive one byte
 137              Parameter: void
 138          */
 139          uchar receive_byte(void)
 140          {
 141   1          uchar i, dat;
 142   1          dat = 0;
 143   1          for (i = 0; i < 8; i++) {
 144   2              dat = dat << 1;
 145   2              receive_bit();
 146   2              if (bit_in == 1)
 147   2                  dat = dat + 1;
 148   2          }
 149   1          send_bit(); // acknowledgement
 150   1          return dat;
 151   1      }
 152          
 153          /*
 154              @author hushmoon
 155              @return T -- the temperature you read but in kevin
 156              Name: Read_T
 157              Function: read temperature through mlx90614
 158              Parameter: void
 159          */
 160          uint Read_T(void)
 161          {
 162   1          I2C_Start();
 163   1          send_byte(0x00); // address
 164   1          send_byte(0x07); // command
 165   1      
 166   1          I2C_Start();
 167   1          send_byte(0x01);
 168   1          bit_out   = 0;
 169   1          Data_Low  = receive_byte();
 170   1          bit_out   = 0;
 171   1          Data_High = receive_byte();
 172   1          bit_out   = 1;
 173   1          PEC       = receive_byte();
 174   1          I2C_Stop();
 175   1          return (Data_High * 256 + Data_Low);
 176   1      }
 177          
 178          /*
C51 COMPILER V9.60.7.0   MLX90614                                                          09/04/2024 00:22:03 PAGE 4   

 179              @author hushmoon
 180              @return T -- the temperature you read but in celsius
 181              Name: Convert_T
 182              Function: Convert the temperature from kelvin to celsius
 183              Parameter: void
 184          */
 185          int Convert_T(void)
 186          {
 187   1          int temp, T;
 188   1          temp = Read_T();
 189   1          T    = ((float)temp * 0.02f - 273.15f) * 100;
 190   1          return T;
 191   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
